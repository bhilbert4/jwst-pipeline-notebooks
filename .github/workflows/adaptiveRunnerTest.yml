name: Config Test - Execute Jupyter Notebooks
on:
  workflow_dispatch:
    inputs:  
      python-version:
        required: true
        type: string

  workflow_call:
    inputs:  
      python-version:
        required: true
        type: string
    secrets:
      CASJOBS_USERID:
        description: 'CASJOBS user ID'
        required: false
      CASJOBS_PW:
        description: 'CASJOBS password'
        required: false

env:
  CASJOBS_PW: ${{ secrets.CASJOBS_PW }}
  CASJOBS_USERID: ${{ secrets.CASJOBS_USERID }}

jobs:
  gather-notebooks:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Find notebook files and determine runner size
        id: set-matrix
        run: |
          # Default matrix (empty)
          matrix="[]"
          
          # Path to your ci_config file
          ci_config_file="ci_config.txt"
          # Ensure the ci_config.txt file exists
          if [[ ! -f "$ci_config_file" ]]; then
            echo "ci_config.txt not found!"
            exit 1
          fi
          
          # Define an associative array to store runner sizes for notebooks
          declare -A config_map
          
          # Read each line from ci_config.txt and construct the config_map
          while IFS=: read -r notebook runner; do
            # Skip empty lines or lines starting with '#'
            if [[ -z "$notebook" || "$notebook" == \#* ]]; then
              continue
            fi
            
            # Trim spaces and store notebook and runner size in the map
            notebook=$(echo "$notebook" | xargs)
            runner=$(echo "$runner" | xargs)
            
            # Use base64 encoding to sanitize the notebook path for array key usage
            key=$(echo "$notebook" | base64)  # Encode notebook path to handle special characters
            config_map["$key"]=$runner
          done < "$ci_config_file"
          
          # Now, loop through the notebooks and set their runner size
          for notebook in $(find notebooks/ -type f -name "*.ipynb"); do
            # Trim leading path information (i.e., extract just the filename)
            notebook_name=$(echo "$notebook" | sed 's|.*/\(.*\)|\1|')
          
            # Sanitize the notebook path for array key usage by base64 encoding
            sanitized_notebook=$(echo "$notebook" | base64)  # Encode notebook path to handle special characters
          
            # Get the runner for this notebook, default to "ubuntu-latest" if not found
            #runner="${config_map["runs-on: group: $sanitized_notebook"]:-"ubuntu-latest"}"
            runner="${config_map["$sanitized_notebook"]:-"ubuntu-latest"}"
            if [[ "$runner" != "ubuntu-latest" ]]; then
              runner="group: $runner"
            fi        
            # Add notebook and runner size to the matrix
            matrix=$(echo $matrix | jq --arg notebook "$notebook" --arg runner "$runner" \
              '. + [{"notebook": $notebook, "runner": $runner}]')
          done
          
          # Ensure the matrix is valid JSON (remove extra spaces or characters)
          echo "Matrix JSON: $matrix"  # Debugging output
          # Remove leading/trailing spaces and newlines
          clean_matrix=$(echo "$matrix" | jq -c .)
          
          # Set the matrix output (ensure it's never empty)
          echo "matrix=$clean_matrix" >> $GITHUB_OUTPUT

  notebook-execution:
    needs: gather-notebooks
    environment: ci_env

    strategy:
        fail-fast: false
        matrix:
            include: ${{ fromJson(needs.gather-notebooks.outputs.matrix) }}

    runs-on: ${{ matrix.runner }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ inputs.python-version }}
        uses: actions/setup-python@v5 
        with:
          python-version: ${{ inputs.python-version }}
          cache: 'pip'
          
      - name: Add conda to system path
        run: |
          # $CONDA is an environment variable pointing to the root of the miniconda directory
          echo $CONDA/bin >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          echo "DEBUG ---"
          pwd
          echo "Path to req's: $(dirname ${{ matrix.notebook }})/requirements.txt"
          ls $(dirname ${{ matrix.notebook }})
          echo "---"
          
          if [ -f $(dirname "${{ matrix.notebook }}")/pre-requirements.sh ]; then
            chmod +x $(dirname "${{ matrix.notebook }}")/pre-requirements.sh
            ./$(dirname "${{ matrix.notebook }}")/pre-requirements.sh
          fi
          if [ -f $(dirname "${{ matrix.notebook }}")/pre-requirements.txt ]; then
            pip install -r $(dirname "${{ matrix.notebook }}")/pre-requirements.txt
          fi
          if [ -f pre-requirements.txt ]; then
            pip install -r pre-requirements.txt
            echo "Found Pre-Reqs"
          fi
          pip install -r $(dirname ${{ matrix.notebook }})/requirements.txt
          #pip install pytest
          #pip install nbval
          pip install nbconvert
          #pip install bandit
          pip install ipykernel

      - name: Execute notebooks
        run: |
          export CASJOBS_PW="$CI_CASJOBS_PW"
          export CASJOBS_USERID="$CI_CASJOBS_USERID"
          jupyter nbconvert --template classic --to html --execute "${{ matrix.notebook }}"

#      - name: Validate notebooks
#        run: |
#          pytest --nbval "${{ matrix.notebook }}"

#      - name: Scan with Bandit
#        run: |
#          pip install ipython
#          jupyter nbconvert --to script ${{ matrix.notebook }}
#          pyfile=$(echo "${{ matrix.notebook }}" | sed 's/\.ipynb$/.py/')
#          bandit -lll -iii $pyfile
