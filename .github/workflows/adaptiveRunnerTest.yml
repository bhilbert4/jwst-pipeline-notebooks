name: Config Test - Execute Jupyter Notebooks
on:
  workflow_dispatch:
    inputs:  
      python-version:
        required: true
        type: string

  workflow_call:
    inputs:  
      python-version:
        required: true
        type: string
    secrets:
      CASJOBS_USERID:
        description: 'CASJOBS user ID'
        required: false
      CASJOBS_PW:
        description: 'CASJOBS password'
        required: false

env:
  CASJOBS_PW: ${{ secrets.CASJOBS_PW }}
  CASJOBS_USERID: ${{ secrets.CASJOBS_USERID }}

jobs:
  generate-matrix:
    name: Generate Notebook Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.build_matrix.outputs.matrix }}
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3

      - name: Check current directory
        run: |
          echo "Current directory: $(pwd)"
          echo "Listing files in current directory:"
          ls -la

      - name: Check if notebooks directory exists
        run: |
          if [ ! -d "notebooks" ]; then
            echo "Error: 'notebooks' directory not found!";
            exit 1;
          fi

      - name: Find notebooks and build matrix
        id: build_matrix
        shell: bash
        run: |
          # List all Jupyter notebooks under 'notebooks/' (null-separated to handle spaces)
          mapfile -d $'\0' -t notebooks < <(find notebooks -type f -name '*.ipynb' -print0)
          default_runner="ubuntu-latest"
          # Start building the JSON string for the matrix
          matrix_json='{"include":['
          separator=""
          for file in "${notebooks[@]}"; do
            # Skip if for some reason the entry is empty
            [[ -z "$file" ]] && continue
            runner="$default_runner"
            # Check if the notebook path is in the config file (match exact path followed by a colon)
            if grep -F -m1 -q "${file}:" ci_config.txt; then
              # Get the first matching line and extract text after the first colon
              config_line=$(grep -F -m1 "${file}:" ci_config.txt)
              runner_config=${config_line#*:}        # remove the path and colon
              runner_config=$(echo "$runner_config" | xargs)  # trim whitespace
              if [[ -n "$runner_config" ]]; then
                runner="$runner_config"
              fi
            fi
            # Escape quotes and backslashes in file and runner names for JSON safety
            file_json=$(printf '%s' "$file"   | sed 's/\\/\\\\/g; s/\"/\\"/g')
            runner_json=$(printf '%s' "$runner" | sed 's/\\/\\\\/g; s/\"/\\"/g')
            # Append this notebook's entry to the JSON array
            matrix_json+="${separator}{\"file\":\"${file_json}\",\"runner\":\"${runner_json}\"}"
            separator=","
          done
          matrix_json+=']}'
          # Output the matrix JSON (as a single line) to be used by subsequent jobs
          echo "matrix=${matrix_json}" >> $GITHUB_OUTPUT

  run-notebooks:
    name: Execute Notebooks in Parallel
    needs: generate-matrix
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}  # This uses the generated matrix output
    runs-on: ${{ matrix.runner }}  # Runs each notebook on its assigned runner
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}

      - name: Install Jupyter
        run: |
          pip install jupyter nbconvert
          
      - name: Set up Python ${{ inputs.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}
          
      - name: Install dependencies from requirements.txt
        run: |
          notebook_dir=$(dirname "${{ matrix.file }}")
          if [ -f "$notebook_dir/requirements.txt" ]; then
            echo "Installing dependencies from $notebook_dir/requirements.txt"
            pip install -r "$notebook_dir/requirements.txt"
          else
            echo "No requirements.txt found in $notebook_dir"
          fi

      - name: Execute Jupyter Notebook
        continue-on-error: true  # This will allow the rest of the jobs to continue even if this step fails
        run: |
          echo "Executing notebook: ${{ matrix.file }} on runner: ${{ matrix.runner }}"
          notebook_path="notebooks/${{ matrix.file }}"
          jupyter nbconvert --to html --execute "${{ matrix.file }}"
