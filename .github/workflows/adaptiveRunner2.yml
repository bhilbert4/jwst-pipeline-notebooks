name: Resource Adaptive Jupyter Notebook Processing

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      python-version:
        description: 'Python version to use for notebook execution'
        required: true
        type: string
  workflow_call:
    inputs:
      python-version:
        description: 'Python version to use for notebook execution'
        required: true
        type: string

env:
  MEMORY_THRESHOLD: 80      # Percentage
  DISK_THRESHOLD_MB: 500    # Minimum available disk space in MB

jobs:
  discover-notebooks:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Find Jupyter Notebooks
        id: set-matrix
        run: |
          # Find all .ipynb files recursively under notebooks/
          NOTEBOOKS=$(find notebooks/ -type f -name "*.ipynb" | jq -R -s -c 'split("\n") | map(select(length > 0))')
          
          # Format as JSON matrix
          MATRIX_JSON=$(echo "$NOTEBOOKS" | jq -c '{args: .}')
          
          # Set output - escape newlines and quotes properly
          echo "matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT

  process-notebooks-standard:
    needs: discover-notebooks
    strategy:
      matrix: ${{ fromJson(needs.discover-notebooks.outputs.matrix) }}
      fail-fast: false
    runs-on: ubuntu-latest
    outputs:
      outcome: ${{ steps.standard-run.outcome }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Jupyter and Monitoring Tools
        run: |
          pip install jupyter nbconvert psutil

      - name: Install Notebook Requirements
        run: |
          NOTEBOOK_DIR=$(dirname "${{ matrix.args }}")
          REQUIREMENTS="$NOTEBOOK_DIR/requirements.txt"
          if [ -f "$REQUIREMENTS" ]; then
            pip install -r "$REQUIREMENTS"
          else
            echo "No requirements.txt found in $NOTEBOOK_DIR, skipping dependency installation"
          fi

      - name: Run Notebook with Resource Monitoring (Standard)
        id: standard-run
        continue-on-error: true
        run: |
          # Create the monitoring script in this step
          cat << 'EOF' > monitor_resources.py
          import psutil
          import os
          import sys
          import time
          import logging

          def monitor_resources(threshold_mem, threshold_disk_mb, notebook_dir, interval=1):
              # Set up logging
              logging.basicConfig(level=logging.INFO)
              
              # Initialize variables
              max_mem = 0
              min_disk_mb = float('inf')
              
              # Get the current notebook directory and ensure it's valid
              if not os.path.isdir(notebook_dir):
                  logging.error(f"Invalid notebook directory: {notebook_dir}")
                  sys.exit(1)
              
              # Monitor memory and disk usage
              while True:
                  try:
                      # Check memory usage
                      mem = psutil.virtual_memory().percent
                      max_mem = max(max_mem, mem)
                      
                      # Check disk usage
                      disk = psutil.disk_usage(notebook_dir)
                      available_mb = disk.free / (1024 * 1024)  # Convert bytes to MB
                      min_disk_mb = min(min_disk_mb, available_mb)
                      
                      # Log memory and disk status
                      logging.info(f"Memory Usage: {mem:.1f}%, Max: {max_mem:.1f}%, Disk Space: {available_mb:.1f}MB, Min: {min_disk_mb:.1f}MB")
                      
                      # Check if resource thresholds are exceeded
                      if mem > threshold_mem or available_mb < threshold_disk_mb:
                          logging.error(f"Resource exceeded: Memory {mem:.1f}% > {threshold_mem}%, Disk {available_mb:.1f}MB < {threshold_disk_mb}MB")
                          sys.exit(1)
                      
                      # Sleep before next check
                      time.sleep(interval)
                  
                  except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                      logging.warning("Process terminated or no longer accessible. Stopping resource monitoring.")
                      break

              # Final log with max memory and min disk space
              logging.info(f"Monitoring complete: Max Memory {max_mem:.1f}%, Min Disk Space {min_disk_mb:.1f}MB")

          def main():
              if len(sys.argv) < 4:
                  print("Usage: monitor_resources.py <threshold_mem> <threshold_disk_mb> <notebook_dir>")
                  sys.exit(1)
              
              threshold_mem = float(sys.argv[1])
              threshold_disk_mb = float(sys.argv[2])
              notebook_dir = sys.argv[3]
              
              monitor_resources(threshold_mem, threshold_disk_mb, notebook_dir)

          if __name__ == "__main__":
              main()
          EOF

          # Run notebook in background
          jupyter nbconvert --to notebook --execute "${{ matrix.args }}" &
          NOTEBOOK_PID=$!
          
          # Start monitoring resources, passing notebook directory
          python monitor_resources.py ${MEMORY_THRESHOLD} ${DISK_THRESHOLD_MB} "$(dirname "${{ matrix.args }}")"
          
          # Wait for the notebook process to finish
          wait $NOTEBOOK_PID
          NOTEBOOK_EXIT_CODE=$?
          
          # Handle the outcome
          if [ $NOTEBOOK_EXIT_CODE -ne 0 ]; then
            echo "Notebook execution failed with exit code $NOTEBOOK_EXIT_CODE"
            exit 1
          fi

  process-notebooks-16gb-cleanup:
    needs: process-notebooks-standard
    if: needs.process-notebooks-standard.outputs.outcome == 'failure'
    strategy:
      matrix: ${{ fromJson(needs.discover-notebooks.outputs.matrix) }}
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - name: Determine notebook directory
        id: get-dir
        run: |
          NOTEBOOK_DIR=$(dirname "${{ matrix.args }}")
          echo "notebook_dir=$NOTEBOOK_DIR" >> $GITHUB_OUTPUT
      - name: Clean notebook directory
        run: |
          rm -rf "${{ steps.get-dir.outputs.notebook_dir }}"/*
      - name: Re-checkout repository
        uses: actions/checkout@v3

  process-notebooks-16gb:
    needs: [discover-notebooks, process-notebooks-standard, process-notebooks-16gb-cleanup]
    if: needs.process-notebooks-standard.outputs.outcome == 'failure'
    strategy:
      matrix: ${{ fromJson(needs.discover-notebooks.outputs.matrix) }}
      fail-fast: false
    runs-on: 
      group: jwst-pipeline-notebooks-16gb
    outputs:
      outcome: ${{ steps.medium-run.outcome }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install Jupyter and Monitoring Tools
        run: |
          pip install jupyter nbconvert psutil
      - name: Install Notebook Requirements
        run: |
          NOTEBOOK_DIR=$(dirname "${{ matrix.args }}")
          REQUIREMENTS="$NOTEBOOK_DIR/requirements.txt"
          if [ -f "$REQUIREMENTS" ]; then
            pip install -r "$REQUIREMENTS"
          else
            echo "No requirements.txt found in $NOTEBOOK_DIR, skipping dependency installation"
          fi
      - name: Run on 16GB runner with Resource Monitoring
        id: medium-run
        continue-on-error: true
        run: |
          # Create the monitoring script in this step
          cat << 'EOF' > monitor_resources.py
          # (Insert the full content of the monitor_resources.py script here)
          EOF

          # Run notebook in background and monitor resources
          jupyter nbconvert --to notebook --execute "${{ matrix.args }}" &
          NOTEBOOK_PID=$!
          
          # Start monitoring, passing notebook path as additional arg
          python monitor_resources.py $NOTEBOOK_PID ${MEMORY_THRESHOLD} ${DISK_THRESHOLD_MB} "${{ matrix.args }}"
          
          # Wait for notebook process to complete and get its exit code
          wait $NOTEBOOK_PID
          NOTEBOOK_EXIT_CODE=$?
          
          # If notebook failed for reasons other than resources, fail the step
          if [ $NOTEBOOK_EXIT_CODE -ne 0 ]; then
            echo "Notebook execution failed with exit code $NOTEBOOK_EXIT_CODE"
            exit 1
          fi

  process-notebooks-32gb-cleanup:
    needs: process-notebooks-16gb
    if: needs.process-notebooks-16gb.outputs.outcome == 'failure'
    strategy:
      matrix: ${{ fromJson(needs.discover-notebooks.outputs.matrix) }}
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - name: Determine notebook directory
        id: get-dir
        run: |
          NOTEBOOK_DIR=$(dirname "${{ matrix.args }}")
          echo "notebook_dir=$NOTEBOOK_DIR" >> $GITHUB_OUTPUT
      - name: Clean notebook directory
        run: |
          rm -rf "${{ steps.get-dir.outputs.notebook_dir }}"/*
      - name: Re-checkout repository
        uses: actions/checkout@v3

  process-notebooks-32gb:
    needs: [discover-notebooks, process-notebooks-16gb, process-notebooks-32gb-cleanup]
    if: needs.process-notebooks-16gb.outputs.outcome == 'failure'
    strategy:
      matrix: ${{ fromJson(needs.discover-notebooks.outputs.matrix) }}
      fail-fast: false
    runs-on: 
      group: jwst-pipeline-notebooks-32gb
    outputs:
      outcome: ${{ steps.large-run.outcome }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install Jupyter and Monitoring Tools
        run: |
          pip install jupyter nbconvert psutil
      - name: Install Notebook Requirements
        run: |
          NOTEBOOK_DIR=$(dirname "${{ matrix.args }}")
          REQUIREMENTS="$NOTEBOOK_DIR/requirements.txt"
          if [ -f "$REQUIREMENTS" ]; then
            pip install -r "$REQUIREMENTS"
          else
            echo "No requirements.txt found in $NOTEBOOK_DIR, skipping dependency installation"
          fi
      - name: Run on 32GB runner with Resource Monitoring
        id: large-run
        continue-on-error: true
        run: |
          # Create the monitoring script in this step
          cat << 'EOF' > monitor_resources.py
          # (Insert the full content of the monitor_resources.py script here)
          EOF

          # Run notebook in background and monitor resources
          jupyter nbconvert --to notebook --execute "${{ matrix.args }}" &
          NOTEBOOK_PID=$!
          
          # Start monitoring, passing notebook path as additional arg
          python monitor_resources.py $NOTEBOOK_PID ${MEMORY_THRESHOLD} ${DISK_THRESHOLD_MB} "${{ matrix.args }}"
          
          # Wait for notebook process to complete and get its exit code
          wait $NOTEBOOK_PID
          NOTEBOOK_EXIT_CODE=$?
          
          # If notebook failed for reasons other than resources, fail the step
          if [ $NOTEBOOK_EXIT_CODE -ne 0 ]; then
            echo "Notebook execution failed with exit code $NOTEBOOK_EXIT_CODE"
            exit 1
          fi

  check-final-outcome:
    needs: [process-notebooks-standard, process-notebooks-16gb, process-notebooks-32gb]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Fail if all attempts unsuccessful
        run: |
          if [ "${{ needs.process-notebooks-standard.outputs.outcome }}" = "failure" ] && \
             [ "${{ needs.process-notebooks-16gb.outputs.outcome }}" = "failure" ] && \
             [ "${{ needs.process-notebooks-32gb.outputs.outcome }}" = "failure" ]; then
            echo "Notebook processing failed on all runner sizes for: ${{ matrix.args }}"
            exit 1
          fi
